public class Node
{
    char ch;
    Dictionary<char,Node> Children ;
    bool idLeaf;
    public Node (char c)
    {
        ch=c;
    }
}

public class regExp
{
    Node root;
    
    public regExp ()
    {
        root = new Node('0');
    }
    
    bool searchWord(string word, Node fromNode, Node Curr)
    {
            Node curr = fromNode;
            bool found= false;
                if (word.length()==0)
                {    
                    return CurrisEnd;
                }
               if (word[0]=='0')
                {
                    foreach(Node child in curr.children)
                    {
                        string newWord = child.ch + word.substring(0,n-1);
                        if (searchWord(newWord , child) && )
                        {
                            return true ;
                        }
                    }
                    return false;
                }
                elseif (curr.children.TrygetValue(word[0], out curr))
                {
                    var newWord = word.substring(0+1,n);
                    return searchWord(newWord, curr);
                }
                
                else
                    return false;
          
    }
    
    
    
LikedList<triplet> findTriplets(int[] a)
{
    LinkedList<triplet> result= new LinkedList<triplet>();
    HashSet<int> uniqueFirst = new HashSet<int>();
    for (int i=0; i<a.length();i++)
    {    
        HashSet<int> sumHash= new HashSet<int>();
        
        if (!uniqueFirst.Contains(a[i]))
        {
            uniqueFirst.add();
            sol.x=a[i];
            sum= -a[i];
            for(j=i+1; j<n;j++)
            {
                if (!sumHash.Contains(sum-a[j])
                {
                    sumHash.add(a[j]);
                }
                else{
                var sol = new triplet();
                sol.x=a[i];
                sol.y=a[j];
                sol.z=sum-a[j];
                result.add(sol);
                
                }
            }
            
            
            
        }
    }
    
    
    
}    
    

	string Multiply(string num1, string num2)
{
    len2= num2.length();
    var subProduct= "0";
    for(j=len2-1 ; j>=0 ; j--)
    {
        string byProduct = multiplyDigit(nim1, (int)num2[j])
        byProduct =byProduct .append('0');
        subProduct=sum(subProduct,byproduct);
        
        
        
    }
}

string multiplyDigit(string num, int digit)
{
    int carry =0;
    stringbuffer response= "";
    for(int i = num.length(); i>=0;i--)
    {
        int product=(atoi(num[i])*digit )+carry;
        
        res.append(product%10);
        carry = product/10;
    }
    res.append(carry);
    return res.reverse();
}
string Multiply(string num1, string num2)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
string Multiply(string num1, string num2)
{
    len2= num2.length();
    var subProduct= "0";
    for(j=len2-1 ; j>=0 ; j--)
    {
        string byProduct = multiplyDigit(nim1, (int)num2[j])
        byProduct =byProduct .append('0');
        subProduct=sum(subProduct,byproduct);
        
        
        
    }
}

string multiplyDigit(string num, int digit)
{
    int carry =0;
    stringbuffer response= "";
    for(int i = num.length(); i>=0;i--)
    {
        int product=(atoi(num[i])*digit )+carry;
        
        res.append(product%10);
        carry = product/10;
    }
    res.append(carry);
    return res.reverse();
} 
string Multiply(string num1, string num2)
{
    len2= num2.length();
    var subProduct= "0";
    for(j=len2-1 ; j>=0 ; j--)
    {
        string byProduct = multiplyDigit(nim1, (int)num2[j])
        byProduct =byProduct .append('0');
        subProduct=sum(subProduct,byproduct);
        
        
        
    }
}

string multiplyDigit(string num, int digit)
{
    int carry =0;
    stringbuffer response= "";
    for(int i = num.length(); i>=0;i--)
    {
        int product=(atoi(num[i])*digit )+carry;
        
        res.append(product%10);
        carry = product/10;
    }
    res.append(carry);
    return res.reverse();
}

using System;
using System.Collections.Generic;
// 9_r4_brbrbr_3b2rb_b2r2br_r2b3rb

// |_|_|_|_|_|_|_|
// |_|_|r|_|_|_|_|
// |b|r|b|r|b|r|_|
// |b|b|b|r|r|b|_|
// |b|r|r|b|b|r|_|
// |r|b|b|r|r|r|b|


// To execute C#, please define "static void Main" on a class
// named Solution.

class Solution
{
    static void Main(string[] args)
    {
        char[,] board= new char[6,7];
        
        string boardConfig="9_r4_brbrbr_3b2rb_b2r2br_r2b3rb";
        
        board = inputParserRevised(boardConfig);
        
        
        for(int i=0; i<6; i++)
        {
            for(int j=0; j<7; j++)
            {
                Console.Write("|{0}",board[i,j]);
            }
            Console.Write('|');
            Console.WriteLine();
        }
        
    }
    
    static char[,] inputParserRevised(string board)
    {
        char[,] boardMatrix = new char[6,7];
        Stack<int> s = new Stack<int>();
        Queue<char> boardArray = new Queue<char>();
        for(int i = 0; i < board.Length;i++)
        {
            
            if(board[i] == '_' || board[i] == 'r' || board[i] == 'b')
            {
                int count = 0;
                if(s.Count==0)
                {
                    count=1;
                }
                else
                {
                    while (s.Count>0)
                    {
                        count=(count*10)+ s.Pop();
                    }
                }
                for(int x=0; x< count;x++)
                {
                    boardArray.Enqueue(board[i]);
                }

                
            }
            else if ( board[i] >= '0' && board[i] <='9')
            {
                s.Push(board[i]-'0');
            }
            else 
            {
                 Console.WriteLine("Invalid Charater in input {0}",i);
                    return boardMatrix;
            }
            
            
        }
        if(boardArray.Count != (6*7))
        {
            Console.WriteLine("Invalid Board config");
            return boardMatrix;
        }
        
        /*Console.WriteLine(boardArray.Count); 
        for(int i =0; i< boardArray.Count ; i++)
        {
           Console.WriteLine(boardArray.Dequeue()); 
        }
        Console.WriteLine(boardArray.Dequeue()); 
        */
        for(int r=0; r<6; r++)
        {
            for(int c=0; c<7;c++)
            {
                boardMatrix[r,c] = boardArray.Dequeue();
            }
        }
        return boardMatrix;
    }
    
    
    
    /*
    
    //check on summation count
    
    static int[,] inputParser(string board)
    {
        int[,] boardMatrix = new int[6,7];
        Queue<char> boardArray = new Queue<char>();
        for(int i = 0; i < board.Length;i++)
        {
            if(board[i] == '_' || board[i] == 'r || board[i] == 'b)
            {
                  int count = etractNumber(board, i);
                if(count <=0 )
                {
                    Console.Writeline("Invalid Count");
                }
                for(int x=0; x< count;x++)
                 {
                    boardArray.EnQueue(board[i]);
                 }
                
            }
            else if ( board[i] > '0' && board[i] <'9')
                      {
                            continue;
                      }
                      else
                      
                      {
                      Console.Writeline("Invalid Character");
                          return;
                      }
        }
        
        if(boardArray.count != (6*7))
        {
            Console.Writeline("Invalid Board config");
            return ;
        }
        
        for(int r=0; r<6; r++)
        {
            for(int c=0; c<7;c++)
            {
                boardMatrix[r][c] = boardArray.DeQueue();
            }
        }
    }
    
    
    int etractNumber(string board, index i)
    {
        
        char[] countString= new char[2];
        int j=i;
        int countStringIndex = 1;
        while(  j=>0 && board[j] > '0' && board[j] <'9' && countStringIndex>=0 )
        {
            a[countStringIndex]=board[j];
            j--;
            countStringIndex--;
            
        }
        
        if(board[j] > '0' && board[j] <'9')
        {
            Console.Writeline("Invalid Count");
            return -1;
        }
        
        int count;
        if (Int32.Parse(a.ToString,out count))
            {
                return count;
            }
        else
        {
            Console.Writeline("Invalid Count");
            return -1;
        }
    }  */
}
 
 Write a function that will return an array of integers that occur exactly once in a given array of integers.

3 5 3 0


int[] getDistinct(int[] arr)
{
    Dictionary<int,int> counter = new Dictionary<char,int>();
    List<int> res = new List<int>();
    for(int i=0;i<arr.Length;i++)//0
    {
        
        if (counter.ContainsKey(arr[i]))
        {
            counter[a[i]]=counter[a[i]]+1;
            
        }
        else
        {
            counter.Add(a[i],1);
        }
        
        
    }
    
    for(int i=0; i<arr.Length;i++)
    {
       if (counter[a[i] == 1)
       {
           res.Add(a[i]);
       }
        
    }
    return res.ToArray();
    
    
}

//3, 2
//5,1
//0,1

//Given two strings. Write a function that will return true if one string is a rotation of the other string.
//e.g. 'bca' and 'cab' are rotations of 'abc' and the function should return true
//'barbazfoo', 'oobarbazfoobarbazf' and 'rbazfooba' are rotations of 'foobarbaz'

bool isRotated(string orig, string rotated)
{

	String concat = rotated+rotated;

	return find(concat,orig);
}


int find(string text, string word)
{

    for(int i=0; i<text.length;i++)//
    {
        int a =i;
        for (j=0; j<word.length; j++)//b-0
        {
            if  (text[a]!=word[j])
            {
                
                break;
            }
            else{
                a++;
            }
        }
        if (j==word.length)//3
        {
            return true;
        }
        
    }
    
    return false;
}

cabcab

bca










    
    
    
    
    
    
    
    
    
    
    
    
    
    